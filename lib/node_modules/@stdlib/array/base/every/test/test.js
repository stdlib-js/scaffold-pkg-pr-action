/*
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var every = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof every, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided an array-like object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		function noop() {},
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			every( value, 0, 0 );
		};
	}
});

tape( 'the function returns true if all elements in a collection are truthy', function test( t ) {
	var bool;

	bool = every( [ 1, 1, 1, 1 ] );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( [ 1, 'a', 'b', 'c' ] );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( [ {}, {}, {} ] );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( [ new Boolean(true), new Boolean(true), new Boolean(true) ] );
	t.strictEqual( bool, true, 'returns true' );

	t.end();
});

tape( 'the function returns false if not all elements in a collection are truthy', function test( t ) {
	var bool;

	bool = every( [ 0, 1, 1, 1 ] );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( [ '', 'a', 'b', 'c' ] );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( [ {}, 0, {} ] );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( [ new Boolean(false), new Boolean(true), new Boolean(true) ] );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns true if all values in a collection are truthy (array-like object)', function test( t ) {
	var bool;

	bool = every( {
		'length': 4,
		'0': 1,
		'1': 1,
		'2': 1,
		'3': 1
	}, 0, 4 );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( {
		'length': 4,
		'0': 1,
		'1': 'a',
		'2': 'b',
		'3': 'c'
	}, 0, 4 );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( {
		'length': 3,
		'0': {},
		'1': {},
		'2': {}
	}, 0, 3 );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( {
		'length': 3,
		'0': new Boolean(true),
		'1': new Boolean(true),
		'2': new Boolean(true)
	}, 0, 3 );
	t.strictEqual( bool, true, 'returns true' );

	t.end();
});

tape( 'the function returns false if not all values in a collection are truthy (array-like object)', function test( t ) {
	var bool;

	bool = every( {
		'length': 4,
		'0': 0,
		'1': 1,
		'2': 1,
		'3': 1
	}, 0, 4 );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( {
		'length': 4,
		'0': '',
		'1': 'a',
		'2': 'b',
		'3': 'c'
	}, 0, 4 );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( {
		'length': 3,
		'0': {},
		'1': 0,
		'2': {}
	}, 0, 3 );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( {
		'length': 3,
		'0': new Boolean(false),
		'1': new Boolean(true),
		'2': new Boolean(true)
	}, 0, 3 );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns true if all values in a collection are truthy (typed array)', function test( t ) {
	var bool;

	bool = every( new Int8Array( [ 1, 1, 1, 1 ] ) );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( new Uint8Array( [ 1, 'a', 'b', 'c' ] ) );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( new Uint16Array( [ {}, {}, {} ] ) );
	t.strictEqual( bool, true, 'returns true' );

	bool = every( new Float32Array( [ new Boolean(true), new Boolean(true), new Boolean(true) ] ) );
	t.strictEqual( bool, true, 'returns true' );

	t.end();
});

tape( 'the function returns false if not all values in a collection are truthy (typed array)', function test( t ) {
	var bool;

	bool = every( new Int16Array( [ 0, 1, 1, 1 ] ) );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( new Uint32Array( [ '', 'a', 'b', 'c' ] ) );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( new Int8Array( [ {}, 0, {} ] ) );
	t.strictEqual( bool, false, 'returns false' );

	bool = every( new Float64Array( [ new Boolean(false), new Boolean(true), new Boolean(true) ] ) );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns true if all values in a collection are truthy (iterators)', function test( t ) {
	var bool;
	var it1;
	var it2;
	var it3;