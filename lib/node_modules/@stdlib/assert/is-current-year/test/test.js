/*
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';


// MODULES //

var tape = require( 'tape' );
var isCurrentYear = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isCurrentYear, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a `Date` object equal to the current year', function test( t ) {
	var bool;
	var d;
	var yr;
	var i;

	yr = new Date().getFullYear();
	for ( i = 0; i < 12; i++ ) {
		d = new Date();
		d.setMonth( i );
		d.setDate( 1 );
		d.setHours( 0 );
		d.setMinutes( 0 );
		d.setSeconds( 0 );
		d.setMilliseconds( 0 );
		bool = isCurrentYear( d );
		t.equal( bool, true, 'returns true when provided '+d.toISOString() );
	}
	t.end();
});

tape( 'the function returns `true` if provided an integer equal to the current year', function test( t ) {
	var bool;
	var yr;
	var i;

	yr = new Date();
	yr = yr.getFullYear();
	for ( i = 0; i < 12; i++ ) {
		bool = isCurrentYear( yr );
		t.equal( bool, true, 'returns true when provided '+yr );
	}
	t.end();
});

tape( 'the function returns `false` if not provided an integer equal to the current year', function test( t ) {
	var bool;
	var yr;

	yr = new Date();
	yr = yr.getFullYear();

	bool = isCurrentYear( yr+1 );
	t.equal( bool, false, 'returns false when provided '+(yr+1) );

	bool = isCurrentYear( yr-1 );
	t.equal( bool, false, 'returns false when provided '+(yr-1) );

	t.end();
});

tape( 'the function returns `false` if not provided a `Date` object representing the current year', function test( t ) {
	var bool;
	var d;
	var yr;

	yr = new Date();
	yr = yr.getFullYear();

	d = new Date();
	d.setFullYear( yr+1 );
	bool = isCurrentYear( d );
	t.equal( bool, false, 'returns false when provided '+d.toISOString() );

	d = new Date();
	d.setFullYear( yr-1 );
	bool = isCurrentYear( d );
	t.equal( bool, false, 'returns false when provided '+d.toISOString() );

	t.end();
});

tape( 'the function returns `false` if not provided a date-time value', function test( t ) {
	var bool;
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		false,
		[],
		{},
		new Date(),
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		bool = isCurrentYear( values[i] );
		t.equal( bool, false, 'returns false when provided '+values[i] );
	}
	t.end();
});


