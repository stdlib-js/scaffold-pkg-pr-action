Input (README.md):
isBinaryString = require( '@stdlib/assert/is-binary-string' );
```

#### isBinaryString( value )

Tests if a `value` is a binary `string`; i.e., a character sequence of `1`'s and `0`'s.

```javascript
var bool = isBinaryString( '1000101' );
// returns true

bool = isBinaryString( 'beep' );
// returns false

bool = isBinaryString( '' );
// returns false
```


Output (test/test.js):
// MODULES //

var tape = require( 'tape' );
var isBinaryString = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isBinaryString, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a binary string', function test( t ) {
	var values;
	var i;

	values = [
		'0',
		'1',
		'10101',
		'000000000000000000000000000000000000000000000000000000000000000000000000000000',
		'11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.equal( isBinaryString( values[i] ), true, 'returns true' );
	}
	t.end();
});

// TODO: Add more tests...

Input (README.md):
isString = require( '@stdlib/assert/is-string' );
```

#### isString( value )

Tests if a value is a `string`.

```javascript
var bool = isString( 'beep' );
// returns true

bool = isString( new String( 'beep' ) );
// returns true
```

#### isString.isPrimitive( value )

Tests if a `value` is a primitive `string`.

```javascript
var bool = isString.isPrimitive( 'beep' );
// returns true

bool = isString.isPrimitive( new String( 'boop' ) );
// returns false
```

#### isString.isObject( value )

Tests if a `value` is a `String` object.

```javascript
var bool = isString.isObject( 'beep' );
// returns false

bool = isString.isObject( new String( 'boop' ) );
// returns true
```

Output (test/test.js):
// MODULES //

var tape = require( 'tape' );
var isString = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof isString, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a method to test for a primitive string', function test( t ) {
	t.equal( typeof isString.isPrimitive, 'function', 'export is a function' );
	t.end();
});

tape( 'attached to the main export is a method to test for a string object', function test( t ) {
	t.equal( typeof isString.isObject, 'function', 'export is a function' );
	t.end();
});

Input (README.md):
{{input}}

Output (test/test.js):