Input (ts):
/**
* Returns a thunk.
*
* @param fcn - function to convert to a thunk
* @param args - function args
* @returns thunk
*
* @example
* var add = require( `@stdlib/math/base/ops/add` );
*
* var f = thunk( add, 2, 3 );
* // returns <Function>
*
* // ...
*
* // Evaluate the thunk:
* var v = f();
* // returns 5
*/
declare function thunk<T extends Array<any>, U>( fcn: ( ...args: T ) => U, ...args: T ): () => U; // tslint-disable-line max-line-length


// EXPORTS //

export = thunk;

Output (ts):
import thunk = require( './index' );


// TESTS //

// The function returns a function...
{
	thunk<[], number>( (): number => 2 ); // $ExpectType () => number
	thunk<Array<number>, number>( ( x: number ): number => x, 2 ); // $ExpectType () => number
	thunk<[number, number], number>( ( x: number, y: number ): number => x + y, 2, 3 ); // $ExpectType () => number
}

// The compiler throws an error if the function is provided a first argument which is not a function...
{
	thunk( true ); // $ExpectError
	thunk( false ); // $ExpectError
	thunk( 5 ); // $ExpectError
	thunk( [] ); // $ExpectError
	thunk( {} ); // $ExpectError
	thunk( 'abc' ); // $ExpectError

	thunk( true, 2 ); // $ExpectError
	thunk( false, 2 ); // $ExpectError
	thunk( 5, 2 ); // $ExpectError
	thunk( [], 2 ); // $ExpectError
	thunk( {}, 2 ); // $ExpectError
	thunk( 'abc', 2 ); // $ExpectError

	thunk( true, 2, 3 ); // $ExpectError
	thunk( false, 2, 3 ); // $ExpectError
	thunk( 5, 2, 3 ); // $ExpectError
	thunk( [], 2, 3 ); // $ExpectError
	thunk( {}, 2, 3 ); // $ExpectError
	thunk( 'abc', 2, 3 ); // $ExpectError
}

// The compiler throws an error if the function is provided an incorrect number of arguments...
{
	thunk(); // $ExpectError
}

Input (ts):
{{input}}

Output (ts):