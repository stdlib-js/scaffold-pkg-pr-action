Input (jsdoc): 
/**
* Pads a string such that the padded string has a length of `len`.
*
* @param {string} str - string to pad
* @param {NonNegativeInteger} len - string length
* @param {Options} [options] - function options
* @param {string} [options.lpad=''] - string used to left pad
* @param {string} [options.rpad=' '] - string used to right pad
* @param {boolean} [options.centerRight=false] - boolean indicating whether to center right in the event of a tie
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} at least one padding must have a length greater than `0`
* @returns {string} padded string
*
* @example
* var str = pad( 'a', 5 );
* // returns 'a    '
*
* @example
* var str = pad( 'a', 10, {
*     'lpad': 'b'
* });
* // returns 'bbbbbbbbba'
*
* @example
* var str = pad( 'a', 12, {
*     'rpad': 'b'
* });
* // returns 'abbbbbbbbbbb'
*
* @example
* var opts = {
*     'lpad': 'a',
*     'rpad': 'c'
* };
* var str = pad( 'b', 10, opts );
* // returns 'aaaabccccc'
*
* @example
* var opts = {
*     'lpad': 'a',
*     'rpad': 'c',
*     'centerRight': true
* };
* var str = pad( 'b', 10, opts );
* // returns 'aaaaabcccc'
*/

Output (bin/cli):
// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var pad = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;
	var len;
	var str;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	if ( args.length ) {
		str = args[ 0 ];
	} else {
		// Treat an empty value as an empty string:
		str = '';
	}
	len = parseInt( flags.len, 10 );
	opts = {};
	if ( flags.lpad ) {
		opts.lpad = flags.lpad;
	}
	if ( flags.rpad ) {
		opts.rpad = flags.rpad;
	}
	if ( flags.cright ) {
		opts.centerRight = flags.cright;
	}

	// Check if we are receiving data from `stdin`...
	if ( !stdinStream.isTTY ) {
		if ( flags.split ) {
			if ( !isRegExpString( flags.split ) ) {
				flags.split = '/'+flags.split+'/';
			}
			opts.split = reFromString( flags.split );
		} else {
			opts.split = RE_EOL;
		}
		return stdin( onRead );
	}
	console.log( pad( str, len, opts ) ); // eslint-disable-line no-console

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var lines;
		var i;
		if ( error ) {
			return cli.error( error );
		}
		lines = data.toString().split( opts.split );

		// Remove any trailing separators (e.g., trailing newline)...
		if ( lines[ lines.length-1 ] === '' ) {
			lines.pop();
		}
		for ( i = 0; i < lines.length; i++ ) {
			console.log( pad( lines[ i ], len, opts ) ); // eslint-disable-line no-console
		}
	}
}

main();

Input (jsdoc):
{{jsdoc}}

Output (bin/cli):